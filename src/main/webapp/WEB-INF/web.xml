<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>hospitalstruts2spring4 -- Archetype Created Web Application</display-name>
  
   <filter>
        <filter-name>struts2</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
        <!-- The action packages parameter tells the filter which packages to scan 
        		 for Action classes during initialization.  If it finds declarations 
        		 of classes in these packages that implement the Action interface, or
        		 have names ending in 'Action', it will scan them for configuration related
        		 annotations.  This provides an alternative configuration mechanism to 
        		 XML files.
        		 
        		 By default, the action's will be configured under a namespace that matches
        		 the sub-packages, relative to the packages listed in the param below, of the
        		 action.  
        		 
        		 Note, this annotation base configuration is the preferred method for configuration
        		 but we will use XML files for portions of this book since the file provides a 
        		 convenient one-stop overview of an application's architecture.
       -->
        <init-param>
     			<param-name>actionPackages</param-name>
    			<param-value>com</param-value>
  		</init-param>  
        

    </filter>
    
    <!-- The Struts 2 filter should be mapped to ALL requests coming into the web application.  As a filter,
				 it can let the non-struts requests pass through and they will arrive at which ever servlets to which
				 they may be mapped.  Of course, this sample app has no other servlets, so we expect the filter to catch 
				 everything.  When the filter recognizes a Struts 2 request, typically by the .action extension, the 
				 normal filter chaining of a web application is aborted and the request is completely handled by
				 the Struts 2 system. -->
				 
    <filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  
</web-app>